# {{page_title}}

## Welcome

First off, hello and welcome to the landing page of my demo's documentation. My name is Calvin and I work in the sales organization at Juniper Networks; I hope that you will find this project helpful.

In this demonstration, we will deploy jtimon as a container to ingest JTI telemetry from Juniper vMX routers.

![topology](https://github.com/cdot65/juniper-telemetry-demo/blob/main/files/images/topology.png?raw=true)

## Overview

Let's talk about the workflow before we get into the requirements. 

At the end of this page we will have deployed a Docker container running [jtimon](https://github.com/nileshsimaria/jtimon) to collect the streaming telemetry sent by our routers. We will have subscribed to the telemetry path that will send our container information regarding to BGP over gRPC with SSL encryption.

## Assumptions made on my part

I make a lot of assumptions in this documentation, here's a short list:

  - you have [Docker installed]() somewhere that can reach the internet
  - you understand the [value proposition and technology that powers](https://www.juniper.net/documentation/us/en/software/junos/interfaces-telemetry/topics/concept/junos-telemetry-interface-oveview.html) streaming telemetry
  - you have access to a Juniper device with JTI installed

## Creating our certs

We will be using SSL certificates for this demo, and if you've ever played with SSL you know that it can be a pain. Here are the steps I followed, as given to the readers of [this great blog](https://iosonounrouter.wordpress.com/2021/12/20/test-juniper-telemetry-in-two-seconds/).

Let's start off by generating a self-signed root CA:

```bash
$ openssl genrsa -out rootCA.key 2048
$ openssl req -x509 -new -key ./rootCA.key -days 365 -out ./rootCA.crt
```

Our next step is to use the rootCA to create a certificate for the jtimon container client

```bash
$ openssl genrsa -out ./client.key 2048 
$ openssl req -new -key ./client.key -out ./client.csr
$ openssl x509 -req -in ./client.csr -CA ./rootCA.crt -CAkey ./rootCA.key -CAcreateserial -out ./client.crt -days 365
```

Finally, we will use the rootCA to create a certificate for the jtimon container client

> pay close attention to the fqdn for this section, it needs to match your router's hostname

```bash
$ openssl genrsa -out ./router.key 2048 
$ openssl req -new -key ./router.key -out ./router.csr
$ openssl x509 -req -in ./router.csr -CA ./rootCA.crt -CAkey ./rootCA.key -CAcreateserial -out ./router.crt -days 365
$ cat ./router.crt ./router.key > ./router.pem
```

## Copy relevant certs to router

Let's use SCP to copy the certs to our router; only relevant files are transferred and stored in the router's `/var/tmp/` directory.

```bash
$ scp rootCA.crt client.crt router.pem root@192.168.110.11:/var/tmp/
```

## Configure JunOS

Three steps here, each with their own commit operation.

1. create CA profile and new local certificate
2. load CA profile and configure streaming attributes
3. enable the streaming of telemetry to our jtimon container

### create CA profile and new local certificate

### load CA profile and configure streaming attributes

### enable the streaming of telemetry to our jtimon container

*This page is automatically generated*