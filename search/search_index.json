{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Example Express app deployed on k8s # Welcome # First off, hello and welcome to the landing page of my app\u2019s documentation. My name is Calvin and I work in the sales organization at Juniper Networks; I hope that you will find this project helpful. This project will stand up an example Express application with a working REST API with a handful of functions. A mongodb database will provide the necessary feature of storing and retrieving data for our little app. Containers # nodejs # A Dockerfile has been provided at files/nodejs ; it is based on node:alpine and simply executes our code after copying it into the /usr/src/app directory. mongodb # Our database platform will be based upon the official mongo:latest image and requires no modification, so the only trace of it will be found in the files/docker-compose.yaml file. Docker Compose # A docker-compose.yaml file has been provided for local testing only. Remember our goal is to deploy this to a k8s cluster. Data Model # For our requests, we\u2019ll need to align ourselves with the data model defined in files/nodejs/models/model.js // files/nodejs/models/model.js const taskSchema = new mongoose . Schema ({ name : { type : String , required : 'Enter the name of the task' }, date_created : { type : Date , default : Date . now }, status : { type : [{ type : String , enum : [ 'pending' , 'ongoing' , 'completed' ] }], default : [ 'pending' ] } }); API methods # The URI for our API methods will end with /tasks or /tasks/:taskId Create a new task # HTTP Method API URI Body ID POST /tasks True body { \"status\" : [ \"pending\" ], \"name\" : \"test out api methods\" } Get list of tasks # HTTP Method API URI Body ID GET /tasks False Delete task # HTTP Method API URI Body ID DELETE /tasks/:taskId False This page is automatically generated using a Python script within the .github directory","title":"Homepage"},{"location":"#example-express-app-deployed-on-k8s","text":"","title":"Example Express app deployed on k8s"},{"location":"#welcome","text":"First off, hello and welcome to the landing page of my app\u2019s documentation. My name is Calvin and I work in the sales organization at Juniper Networks; I hope that you will find this project helpful. This project will stand up an example Express application with a working REST API with a handful of functions. A mongodb database will provide the necessary feature of storing and retrieving data for our little app.","title":"Welcome"},{"location":"#containers","text":"","title":"Containers"},{"location":"#nodejs","text":"A Dockerfile has been provided at files/nodejs ; it is based on node:alpine and simply executes our code after copying it into the /usr/src/app directory.","title":"nodejs"},{"location":"#mongodb","text":"Our database platform will be based upon the official mongo:latest image and requires no modification, so the only trace of it will be found in the files/docker-compose.yaml file.","title":"mongodb"},{"location":"#docker-compose","text":"A docker-compose.yaml file has been provided for local testing only. Remember our goal is to deploy this to a k8s cluster.","title":"Docker Compose"},{"location":"#data-model","text":"For our requests, we\u2019ll need to align ourselves with the data model defined in files/nodejs/models/model.js // files/nodejs/models/model.js const taskSchema = new mongoose . Schema ({ name : { type : String , required : 'Enter the name of the task' }, date_created : { type : Date , default : Date . now }, status : { type : [{ type : String , enum : [ 'pending' , 'ongoing' , 'completed' ] }], default : [ 'pending' ] } });","title":"Data Model"},{"location":"#api-methods","text":"The URI for our API methods will end with /tasks or /tasks/:taskId","title":"API methods"},{"location":"#create-a-new-task","text":"HTTP Method API URI Body ID POST /tasks True body { \"status\" : [ \"pending\" ], \"name\" : \"test out api methods\" }","title":"Create a new task"},{"location":"#get-list-of-tasks","text":"HTTP Method API URI Body ID GET /tasks False","title":"Get list of tasks"},{"location":"#delete-task","text":"HTTP Method API URI Body ID DELETE /tasks/:taskId False This page is automatically generated using a Python script within the .github directory","title":"Delete task"}]}